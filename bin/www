#!/usr/bin/env node

/**
 * Module dependencies.
 */

const app = require('../app');
const debug = require('debug')('api:server');
const http = require('http');
const fs = require('fs');

/**
 * Read config.
 */

try {
  // file ==> JavaScript object
  global.config = {
    general: JSON.parse(fs.readFileSync(__dirname + '/../config/general.json').toString()),
    sensitive: JSON.parse(fs.readFileSync(__dirname + '/../config/sensitive.json').toString()),
  };
  // type checking
  if (typeof (global.config.general.port) !== 'string') {
    throw 'typeof (global.config.general.port) !== \'string\'';
  }
  if (typeof (global.config.general.urlToken) !== 'string') {
    throw 'typeof (global.config.general.urlToken) !== \'string\'';
  }
  if (typeof (global.config.general.githubPrefix) !== 'string') {
    throw 'typeof (global.config.general.githubPrefix) !== \'string\'';
  }
  if (typeof (global.config.sensitive.github) !== 'object') {
    throw 'typeof (global.config.sensitive.github) !== \'object\'';
  }
  if (typeof (global.config.sensitive.github.username) !== 'string') {
    throw 'typeof (global.config.sensitive.github.username) !== \'string\'';
  }
  if (typeof (global.config.sensitive.github.token) !== 'string') {
    throw 'typeof (global.config.sensitive.github.username) !== \'string\'';
  }
} catch (e) {
  console.log(e.toString());
  process.exit(1);
}
console.log('global.config =', JSON.stringify(global.config, null, 2));

/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(process.env.PORT || global.config.general.port);
app.set('port', port);

/**
 * Create HTTP server.
 */

const server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  const addr = server.address();
  const bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
